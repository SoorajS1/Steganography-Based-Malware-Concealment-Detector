import os
import sys
import hashlib
from PIL import Image
from pydub import AudioSegment
from mutagen import File as AudioFile
import json

# Helper function to calculate MD5 hash of a file
def calculate_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

# Function to analyze image file for hidden data
def analyze_image(file_path):
    try:
        img = Image.open(file_path)
        img_metadata = img.info
        print(f"\n[INFO] Analyzing image: {file_path}")
        
        # Check for metadata
        if img_metadata:
            print(f"[WARNING] Metadata found in image: {img_metadata}")
        
        # Check for unusual image dimensions
        width, height = img.size
        if width * height > 5000000:  # Arbitrary large pixel size
            print(f"[WARNING] Unusually large dimensions found in image: {width}x{height}")
        
        # Calculate hash and check for abnormalities
        file_hash = calculate_md5(file_path)
        print(f"[INFO] Image hash (MD5): {file_hash}")
        
    except Exception as e:
        print(f"[ERROR] Could not analyze image: {e}")

# Function to analyze audio file for hidden data
def analyze_audio(file_path):
    try:
        audio = AudioSegment.from_file(file_path)
        metadata = AudioFile(file_path)
        
        print(f"\n[INFO] Analyzing audio: {file_path}")
        
        # Check for metadata
        if metadata.tags:
            print(f"[WARNING] Metadata found in audio: {metadata.tags}")
        
        # Check for unusual duration or size
        duration = len(audio) / 1000  # in seconds
        file_size = os.path.getsize(file_path) / (1024 * 1024)  # in MB
        
        if duration > 300 or file_size > 50:  # Arbitrary thresholds: 5 minutes or 50 MB
            print(f"[WARNING] Unusual audio size or duration found: {file_size:.2f} MB, {duration:.2f} sec")
        
        # Calculate hash and check for abnormalities
        file_hash = calculate_md5(file_path)
        print(f"[INFO] Audio hash (MD5): {file_hash}")
        
    except Exception as e:
        print(f"[ERROR] Could not analyze audio: {e}")

# Function to scan a directory for suspicious image and audio files
def scan_directory(directory):
    suspicious_files = []
    print(f"\n[INFO] Scanning directory: {directory}")
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):
                analyze_image(file_path)
            elif file.lower().endswith(('.mp3', '.wav', '.ogg', '.flac')):
                analyze_audio(file_path)
            else:
                continue
            suspicious_files.append(file_path)
    
    # Save suspicious files list to JSON for logging
    with open('suspicious_files.json', 'w') as log_file:
        json.dump(suspicious_files, log_file, indent=4)
    print("\n[INFO] Scan complete. Log saved to 'suspicious_files.json'.")

# Main function
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python steganography_detector.py <directory_path>")
        sys.exit(1)
    
    directory = sys.argv[1]
    if not os.path.isdir(directory):
        print(f"Error: {directory} is not a valid directory")
        sys.exit(1)
    
    scan_directory(directory)
